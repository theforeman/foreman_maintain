#!/usr/bin/env ruby
#
# Trivial Passenger memory monitor and recycler. See the configuration file
# /etc/passenger-recycler.yaml for options. Execute via SCL.
#
require "yaml"

$conf = {}
CONFIG = '/etc/passenger-recycler.yaml'
$conf = YAML.load_file(CONFIG) if File.readable?(CONFIG)
exit 0 unless $conf[:ENABLED]

def running?(pid)
  return Process.getpgid(pid) != -1
rescue Errno::ESRCH
  return false
end

def debug msg
  puts(msg) if $conf[:DEBUG]
end

def verbose msg
  puts(msg) if $conf[:VERBOSE]
end

require 'phusion_passenger'
require 'phusion_passenger/platform_info'
require 'phusion_passenger/platform_info/ruby'
require 'phusion_passenger/admin_tools/memory_stats'
PhusionPassenger.locate_directories
stats = PhusionPassenger::AdminTools::MemoryStats.new
unless stats.platform_provides_private_dirty_rss_information?
  puts "Please run as root or platform unsupported"
  exit 1
end
killed = 0
stats.passenger_processes.each do |p|
  pid = p.pid.to_i
  debug "Checking #{pid} with RSS of #{p.private_dirty_rss}"
  if p.private_dirty_rss > $conf[:MAX_PRIV_RSS_MEMORY]
    started = `ps -p#{pid} -o start=`.strip rescue '?'
    status_ps = `ps -p#{pid} -u`
    status_all = `passenger-status 2>/dev/null`
    status_backtraces = `passenger-status --show=backtraces 2>/dev/null`
    verbose "Terminating #{pid} (started #{started}) with private dirty RSS size of #{p.private_dirty_rss} MB"
    Process.kill "SIGUSR1", pid
    sleep $conf[:GRACEFUL_SHUTDOWN_SLEEP]
    if running?(pid) && $conf[:KILL_BUSY]
      verbose "Process #{pid} is still running, sending SIGKILL"
      Process.kill "KILL", pid
      sleep 5
    end
    if running?(pid)
      verbose "Process #{pid} still terminating, moving on..."
    else
      verbose "Process successfully #{pid} terminated"
    end
    if $conf[:SEND_STATUS]
      verbose status_ps
      verbose status_all
      verbose status_backtraces
    end
    killed += 1
    exit(1) if killed >= $conf[:MAX_TERMINATION]
  end
end
exit 0
